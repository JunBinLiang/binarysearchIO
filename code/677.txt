import java.util.*;

class Solution {
    int dp[][][];
    public int solve(int[] A) {
        int n=A.length;
        dp=new int[n+1][n+1][n+1];
        init();

        return dfs(A,0,n-1,0);
    }

    public int dfs(int A[],int l,int r,int pre){
        if(l>r)return 0;
        if(l==r){
            int cnt=1+pre;
            return cnt*cnt;
        }
        if(dp[l][r][pre]!=-1)return dp[l][r][pre];
        int res=0;
        int first=A[l];
        res=Math.max(res,(1+pre)*(1+pre)+dfs(A,l+1,r,0));

        for(int i=l+1;i<=r;i++){
            if(first==A[i]){
                res=Math.max(res,dfs(A,l+1,i-1,0)+dfs(A,i,r,1+pre));
            }
        }
        dp[l][r][pre]=res;
        return dp[l][r][pre];
    }

    public void init(){
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }
    }
}
