import java.util.*;

class Solution {
    public int solve(int[][] A, int k) {
        if(A.length==0||k==0)return 0;
        int res=Integer.MAX_VALUE;

        if(k==1){
            for(int i=0;i<A.length;i++){
                res=Math.min(res,A[i][0]+A[i][1]+A[i][2]);
            }
            return res;
        }

        if(k==2){
            for(int i=0;i<A.length;i++){
                for(int j=i+1;j<A.length;j++){
                    int a=0,b=0,c=0;
                    a=Math.max(A[i][0],A[j][0]);
                    b=Math.max(A[i][1],A[j][1]);
                    c=Math.max(A[i][2],A[j][2]);
                    res=Math.min(res,a+b+c);
                }
            }

            return res;
        }


        Arrays.sort(A,(a,b)->{
            return a[0]-b[0];
        });

        
        for(int i=0;i<A.length;i++){
            //enumerate if A[i][0] is the max
            int first=A[i][0];
            if(i+1<k)continue;

            //row i have to be taken

            List<int[]>list=new ArrayList<>();
            PriorityQueue<Integer>pq=new PriorityQueue<>((a,b)->{return b-a;});//max heap
            for(int j=0;j<i;j++){//exclude i
                list.add(new int[]{A[j][1],A[j][2]});
            }

            Collections.sort(list,(a,b)->{
                return a[0]-b[0];
            });
            
            for(int j=0;j<list.size();j++){//current j must be taken

                if(pq.size()==k-2){
                    int a=first;
                    int b=Math.max(list.get(j)[0],A[i][1]);
                    int c=Math.max(pq.peek(),Math.max(list.get(j)[1],A[i][2]));
                    res=Math.min(res,a+b+c);
                }

                pq.add(list.get(j)[1]);
                if(pq.size()==k-1)pq.poll();
            }
        }


        return res;
    }
}
