import java.util.*;

class Solution {
    TreeSet<Integer>treeset=new TreeSet<>();
    public int solve(int[] nums) {
        int res=Integer.MAX_VALUE;
        int A[][]=new int[nums.length][2];
        for(int i=0;i<nums.length;i++){
            A[i][0]=nums[i];
            A[i][1]=i;
        }

        Arrays.sort(A,(a,b)->{
            return a[0]-b[0];
        });

        Map<Integer,TreeSet<Integer>>map=new HashMap<>();
        for(int i=0;i<A.length;i++){
            if(!map.containsKey(A[i][0]))map.put(A[i][0],new TreeSet<>());
            map.get(A[i][0]).add(A[i][1]);
            treeset.add(A[i][0]);
        }


        for(int i=0;i<A.length;i++){
            int cur=A[i][0];
            TreeSet<Integer>set1=map.get(cur);
            Integer high=set1.higher(A[i][1]);
            Integer low=set1.lower(A[i][1]);
            if(high!=null){
                res=Math.min(res,high-A[i][1]);
            }
            if(low!=null){
                res=Math.min(res,A[i][1]-low);
            }

            Integer pre=treeset.lower(cur);
            if(pre!=null){
                TreeSet<Integer>set2=map.get(pre);
                high=set2.higher(A[i][1]);
                low=set2.lower(A[i][1]);
                if(high!=null){
                    res=Math.min(res,high-A[i][1]);
                }
                if(low!=null){
                    res=Math.min(res,A[i][1]-low);
                }
            }
        }
        
        return res;
    }

    //1 1 1   2 2 2   5 5
}
