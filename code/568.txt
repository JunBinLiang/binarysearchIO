import java.util.*;

class Solution {
    int mod=1000000007;
    long dp[][];
    int n;
    public int solve(int[][] A) {
        n=A.length;
        for(int i=0;i<n;i++){
            int sum=0;
            for(int j=0;j<n;j++){
                sum+=A[i][j];
            }
            if(sum==n)return 0;
        }
        dp=new long[n][1<<n];
        for(int i=0;i<dp.length;i++){
            Arrays.fill(dp[i],-1);
        }

        long res=dfs(A,0,(1<<n)-1);
        return (int)(res);
    }

    public long dfs(int A[][],int r,int state){
        if(r>=n){
            if(state==0)return 1;
            return 0;
        }
        if(dp[r][state]!=-1)return dp[r][state];
        long res=0;

        for(int i=0;i<n;i++){
            if(A[r][i]==1)continue;
            if((state&(1<<i))!=0){
                res+=dfs(A,r+1,state^(1<<i));
                res%=mod;
            }
        }
        dp[r][state]=res;
        return res;
    }
}
