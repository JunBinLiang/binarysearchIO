1.reverse edge direction
2.multiple source BFS


import java.util.*;

class Solution {
    List<Integer>adjecent[];
    int p[];
    int res[];
    int dis[][];
    public int[] solve(int[] A) {
        int n=A.length;
        dis=new int[n][2];
        adjecent=new ArrayList[A.length];
        p=new int[A.length];
        res=new int[A.length];
        Arrays.fill(res,-1);
        
        for(int i=0;i<adjecent.length;i++){
            adjecent[i]=new ArrayList<>();
            p[i]=A[i]%2;
        }

        for(int i=0;i<A.length;i++){
            if(i+A[i]<A.length){
                adjecent[i+A[i]].add(i);
            }
            if(i-A[i]>=0){
                adjecent[i-A[i]].add(i);
            }
        }

        boolean visit[]=new boolean[n];
        Queue<int[]>q=new LinkedList<>();
        for(int i=0;i<A.length;i++){
            if(p[i]%2==0){
                q.add(new int[]{i,0});
                visit[i]=true;
            }
        }
        while(q.size()!=0){
            int pair[]=q.poll();
            int v=pair[0],level=pair[1];
            List<Integer>childs=adjecent[v];
            for(int next:childs){
                if(!visit[next]){
                    visit[next]=true;
                    res[next]=1+level;
                    q.add(new int[]{next,1+level});
                }
            }
        }
        

        visit=new boolean[n];
        for(int i=0;i<A.length;i++){
            if(p[i]%2==1){
                q.add(new int[]{i,0});
                visit[i]=true;
            }
        }

        while(q.size()!=0){
            int pair[]=q.poll();
            int v=pair[0],level=pair[1];
            List<Integer>childs=adjecent[v];
            for(int next:childs){
                if(!visit[next]){
                    visit[next]=true;
                    res[next]=1+level;
                    q.add(new int[]{next,1+level});
                }
            }
        }


        return res;
    }

   
    
}
