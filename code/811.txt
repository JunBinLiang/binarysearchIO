import java.util.*;

class Solution {
    int cost[][];
    int dp[][];
    public int solve(String s, int k) {
        dp=new int[k+1][s.length()];
        cost=new int[s.length()][s.length()];
        for(int i=0;i<dp.length;i++)Arrays.fill(dp[i],-1);
        for(int i=0;i<s.length();i++){
            for(int j=i+1;j<s.length();j++){
                cost[i][j]=change(s,i,j);
            }
        }
        return dfs(k,s.length()-1);
    }

    public int dfs(int k,int index){
        if(k==1){
            return cost[0][index];
        }
        if(dp[k][index]!=-1)return dp[k][index];
        int res=1000000;
        for(int i=index;i>=0;i--){
            int remain=i;
            if(remain<k-1)break;
            res=Math.min(res,cost[i][index]+dfs(k-1,i-1));
        }
        dp[k][index]=res;
        return res;
    }
    
    public int change(String s,int l,int r){
        int cnt=0;
        while(l<r){
            if(s.charAt(l)!=s.charAt(r))cnt++;
            l++;r--;
        }
        return cnt;
    }
}
