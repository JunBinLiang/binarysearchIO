import java.util.*;

class Solution {
    public int solve(int[][] lines, int lo, int hi) {
        if(lines.length<2)return 0;
        System.out.println(lines.length);
        int res=0;
        int n=lines.length;
        long A[][]=new long[n][2];
        PriorityQueue<long[]>pq=new PriorityQueue<>((a,b)->{
            long x=a[0];
            long y=b[0];
            return Long.compare(x,y);

        });
        for(int i=0;i<A.length;i++){
            long m=lines[i][0];
            long b=lines[i][1];
            A[i][0]=lo*m+b;
            A[i][1]=hi*m+b;
            pq.add(new long[]{A[i][0],A[i][1]});
        }

        
        for(int i=0;i<A.length;i++){
            A[i]=pq.poll();
        }



        long left[][]=new long[n][2];
        long right[][]=new long[n][2];
        long mx=-10000000000000000l;
        long mn=10000000000000000l;

        Map<Long,Integer>map=new HashMap<>();

        for(int i=0;i<A.length;i++){
            //System.out.println(A[i][0]+" "+A[i][1]);
            mx=Math.max(mx,A[i][1]);
            mn=Math.min(mn,A[i][1]);
            left[i][0]=mx;
            left[i][1]=mn;
            if(!map.containsKey(A[i][0]))map.put(A[i][0],0);
            map.put(A[i][0],map.get(A[i][0])+1);
        }
        

        mx=Integer.MIN_VALUE;
        mn=Integer.MAX_VALUE;
        for(int i=A.length-1;i>=0;i--){
            mx=Math.max(mx,A[i][1]);
            mn=Math.min(mn,A[i][1]);
            right[i][0]=mx;
            right[i][1]=mn;
        }



        for(int i=0;i<A.length;i++){//[max,min]
            boolean good=false;
            if(map.get(A[i][0])>1){
                res++;
                continue;
            }

            if(i==0){//up
               if(A[i][1]>=A[i][0]){
                   if(right[i+1][1]<=A[i][1])good=true;
               }
               else{//down
                   if(right[i+1][1]<=A[i][1])good=true;
               }
            }
            else if(i==n-1){
                if(A[i][1]>=A[i][0]){
                    if(left[i-1][0]>=A[i][1])good=true;
                }
                else{
                   if(left[i-1][0]>=A[i][1])good=true;
                }
            }
            else{
                if(A[i][1]>=A[i][0]){
                    if(right[i+1][1]<=A[i][1])good=true;
                    if(left[i-1][0]>=A[i][1])good=true;
                }
                else{
                    if(right[i+1][1]<=A[i][1])good=true;
                    if(left[i-1][0]>=A[i][1])good=true;
                }
            }
            if(good){
                res++;
            }
        }
        return res;
    }
}
