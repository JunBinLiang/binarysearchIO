import java.util.*;

class Solution {
    boolean visit[][];
    Queue<int[]>q=new LinkedList<>();
    public int solve(int[][] mat) {
        int dr=-1,dc=-1;
        int n=mat.length;
        int m=mat[0].length;
        visit=new boolean[n][m];

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==1){
                    visit[i][j]=true;
                    q.add(new int[]{i,j,0});
                }
                else if(mat[i][j]==2){
                    dr=i;
                    dc=j;
                }
            }
        }

        while(q.size()!=0){
            int top[]=q.poll();
            int i=top[0],j=top[1],level=top[2];
            if(i==dr&&j==dc)return level;

            add(mat,i+2,j+1,level+1);
            add(mat,i+2,j-1,level+1);
            add(mat,i-2,j+1,level+1);
            add(mat,i-2,j-1,level+1);

            add(mat,i+1,j+2,level+1);
            add(mat,i+1,j-2,level+1);
            add(mat,i-1,j+2,level+1);
            add(mat,i-1,j-2,level+1);
        }
        return -1;
    }


    public void add(int mat[][],int i,int j,int level){
        if(i<0||j<0||i>=mat.length||j>=mat[0].length)return;
        if(visit[i][j])return;
        visit[i][j]=true;
        q.add(new int[]{i,j,level});
    }  
}
