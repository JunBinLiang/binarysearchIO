import java.util.*;

class Solution {
    ArrayList<Integer>adjecentlist[];
    List<List<Integer>>res=new ArrayList<>();
    int low[];
    int dis[];
    int time=1;
    boolean visit[];
    int n=252;
    public int solve(int[][] connections) {
        adjecentlist=new ArrayList[n];
        low=new int[n];
        dis=new int[n];
        visit=new boolean[n];
        for(int i=0;i<n;i++)adjecentlist[i]=new ArrayList<>();
        
        for(int i=0;i<connections.length;i++){
            int next[]=connections[i];
            for(int c:next){
                adjecentlist[i].add(c);
                adjecentlist[c].add(i);
            }
        }

        visit[0]=true;
        dfs(-1,0);
        return res.size();
    }

    public void dfs(int parent,int root){
        low[root]=time;
        dis[root]=time++;
        List<Integer>childs=adjecentlist[root];   
        for(int child:childs){
            if(!visit[child]){
                visit[child]=true;
                dfs(root,child);
                if(low[child]<=dis[root]){
                    low[root]=Math.min(low[root],low[child]);
                }else{//bridge, the childs(subtree) can not met some of the ancestors
                    List<Integer>list=new ArrayList<>();
                    list.add(root);list.add(child);
                    res.add(list);
                }
                
            }else{
                if(child!=parent){
                    low[root]=Math.min(low[child],low[root]); //met some ancestors
                }
            } 
        }
    }
}
