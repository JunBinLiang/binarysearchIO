import java.util.*;

class Solution {
    int dp[][][];
    public boolean solve(int[] A) {
        int sum=0;
        dp=new int[A.length][A.length][2];
        for(int i:A)sum+=i;

        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++)Arrays.fill(dp[i][j],-1);
        }
        System.out.println(dfs(A,0,A.length-1,0));
        return dfs(A,0,A.length-1,0)*2>sum;
    }

    public int dfs(int A[],int l,int r,int turn){
        if(l>r)return 0;
        if(l==r){
            if(turn==1)return 0;
            return A[l];
        }
        if(dp[l][r][turn]!=-1)return dp[l][r][turn];
        int next=0;
        if(turn==0)next=1;

        int res=Integer.MAX_VALUE;
        if(turn==0){
            res=0;
            res=Math.max(res,A[l]+dfs(A,l+1,r,next));
            res=Math.max(res,A[r]+dfs(A,l,r-1,next));
        }
        else{
            res=Math.min(res,dfs(A,l+1,r,next));
            res=Math.min(res,dfs(A,l,r-1,next));
        }
        dp[l][r][turn]=res;
        return res;
    }

}
