import java.util.*;

class Solution {
    boolean color[][][];
    boolean visit1[][];boolean visit2[][];boolean visit3[][];boolean visit4[][];
    public int solve(int[][] mat) {
        if(!canpass(mat))return 0;
        int n=mat.length;
        int m=mat[0].length;
        visit1=new boolean[n][m];visit2=new boolean[n][m];visit3=new boolean[n][m];visit4=new boolean[n][m];
        color=new boolean[mat.length][mat[0].length][4];
        
        //do the marking
        for(int i=0;i<m;i++){
            color[0][i][0]=true;
            color[n-1][i][1]=true;
            if(mat[0][i]==1){
                dfs1(mat,0,i);
            }

            if(mat[n-1][i]==1){
                dfs2(mat,n-1,i);
            }
        }

        for(int i=0;i<n;i++){
            color[i][0][2]=true;
            color[i][m-1][3]=true;
            if(mat[i][0]==1){
                dfs3(mat,i,0);
            }

            if(mat[i][m-1]==1){
                dfs4(mat,i,m-1);
            }
        }




        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==1)continue;
                if(i==0&&j==0)continue;
                if(i==n-1&&j==m-1)continue;

                //if(i==0&&j==1){
                    //System.out.println("yes  "+color[i][j][0]+"   "+color[i][j][1]);
                //}
                
                if(color[i][j][0]&&color[i][j][2])return 1;
                if(color[i][j][1]&&color[i][j][3])return 1;
                if(color[i][j][0]&&color[i][j][1])return 1;
                if(color[i][j][2]&&color[i][j][3])return 1;
                
            }
        }

        return 2;
    }

    public boolean in(int mat[][],int i,int j){
        if(i<0||j<0||i>=mat.length||j>=mat[0].length)return false;
        return true;
    }

    public void dfs1(int mat[][],int i,int j){
        if(i<0||j<0||i>=mat.length||j>=mat[0].length)return;
        if(visit1[i][j])return;
        if(mat[i][j]==0){
            color[i][j][0]=true;
            return;
        }
        color[i][j][0]=true;
        visit1[i][j]=true;
        dfs1(mat,i+1,j);
        dfs1(mat,i+1,j+1);
        dfs1(mat,i+1,j-1);
    }

    public void dfs2(int mat[][],int i,int j){
        if(i<0||j<0||i>=mat.length||j>=mat[0].length)return;
        if(visit2[i][j])return;
        if(mat[i][j]==0){
            color[i][j][1]=true;
            return;
        }
        color[i][j][1]=true;
        visit2[i][j]=true;
        dfs2(mat,i-1,j);
        dfs2(mat,i-1,j+1);
        dfs2(mat,i-1,j-1);
    }

    public void dfs3(int mat[][],int i,int j){
        if(i<0||j<0||i>=mat.length||j>=mat[0].length)return;
        if(visit3[i][j])return;
        if(mat[i][j]==0){
            color[i][j][2]=true;
            return;
        }
        color[i][j][2]=true;
        visit3[i][j]=true;
        dfs3(mat,i,j+1);
        dfs3(mat,i+1,j+1);
        dfs3(mat,i-1,j+1);
    }

     public void dfs4(int mat[][],int i,int j){
        if(i<0||j<0||i>=mat.length||j>=mat[0].length)return;
        if(visit4[i][j])return;
        if(mat[i][j]==0){
            color[i][j][3]=true;
            return;
        }
        color[i][j][3]=true;
        visit4[i][j]=true;
        dfs4(mat,i,j-1);
        dfs4(mat,i+1,j-1);
        dfs4(mat,i-1,j-1);
    }


    public boolean canpass(int mat[][]){
        int n=mat.length;int m=mat[0].length;
        boolean visit[][]=new boolean[n][m];
        Queue<int[]>q=new LinkedList<>();
        q.add(new int[]{0,0});
        visit[0][0]=true;

        while(q.size()!=0){
            int pair[]=q.poll();
            if(pair[0]==n-1&&pair[1]==m-1)return true;
            int i=pair[0],j=pair[1];
            add(mat,i+1,j,q,visit);
            add(mat,i-1,j,q,visit);
            add(mat,i,j+1,q,visit);
            add(mat,i,j-1,q,visit);
        }
        return false;
    }

    public void add(int mat[][],int i,int j,Queue<int[]>q,boolean visit[][]){
        if(i<0||j<0||i>=mat.length||j>=mat[0].length)return;
        if(visit[i][j]||mat[i][j]==1)return;
        visit[i][j]=true;
        q.add(new int[]{i,j});
    }
}
